## 
## HEAT_SOAK HEATER=<heater_name> TARGET=<target_heater_temperature> SOAKER=<heat_soak_temp_sensor_name> [RATE=<heat_soak_temp_rate_of_change>] [TIMEOUT=<time_to_abort_heat_soak>]
##
##
## e.g.
## HEAT_SOAK HEATER=heater_bed TARGET=100 SOAKER="temperature_sensor top_bed"
##
## Based on work by blalor: https://klipper.discourse.group/t/interruptible-heat-soak/1552
##

[gcode_macro HEAT_SOAK]
description: Wait for a temperature sensor to reach thermal equilibrium

variable_last_temp: 0
variable_last_soak_temp_rate: None
variable_temp_history: None
variable_rate_history: None
variable_stage: None ## heating -> soaking -> done -> None
variable_total_time_elapsed: 0
variable_soak_time_remaining: 0
variable_check_interval: 1
variable_heating_report_interval: 2
variable_soaking_report_interval: 5
variable_heater_sensor: None
variable_soaker_sensor: None
variable_timeout: 30
variable_target_temp: 0.0
variable_min_soak_temp: 0
variable_target_rate: 0.3
variable_continue: None
variable_cancel: None
variable_temp_smooth_time: 4.0
variable_rate_smooth_time: 20.0

gcode:
    # Soaker is required
    {% set SOAKER = params.SOAKER | string %}
    {% set RATE = params.RATE | default(0.3) | float %} ## in degrees C per minute
    {% set SOAK_TEMP = params.SOAK_TEMP | default(0.0) | float %}
    {% set HEATER = (params.HEATER | string) %} # Optional heater
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set TIMEOUT = (params.TIMEOUT | default(30) | int) * 60 %} ## minutes to seconds
    {% set TEMP_SMOOTH = params.TEMP_SMOOTH | default(4.0) | float %} ## seconds for temp smoothing
    {% set RATE_SMOOTH = params.RATE_SMOOTH | default(20) | float %} ## seconds for rate smoothing
    {% set CONTINUE  = (params.CONTINUE | string) %}
    {% set CANCEL  = (params.CANCEL | string) %}
    {% set HEATING_REPORT_INTERVAL  = params.HEATING_REPORT_INTERVAL | default(2) | int %}
    {% set SOAKING_REPORT_INTERVAL  = params.SOAKING_REPORT_INTERVAL | default(5) | int %}

    # User writeable variables
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heater_sensor           VALUE="{HEATER | pprint}"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp             VALUE={TARGET}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=min_soak_temp           VALUE={SOAK_TEMP}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaker_sensor           VALUE="{SOAKER | pprint}"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_rate             VALUE={RATE}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining     VALUE={TIMEOUT}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=continue                VALUE="'{CONTINUE}'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=cancel                  VALUE="'{CANCEL}'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_smooth_time        VALUE={TEMP_SMOOTH}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=rate_smooth_time        VALUE={RATE_SMOOTH}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heating_report_interval VALUE={HEATING_REPORT_INTERVAL}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaking_report_interval VALUE={SOAKING_REPORT_INTERVAL}

    # Internal variables
    {% set soak_temp = printer[SOAKER].temperature %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_temp               VALUE={soak_temp}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_history            VALUE="{([soak_temp] | pprint)}"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=rate_history            VALUE="{([] | pprint)}"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed      VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_soak_temp_rate     VALUE=None
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=check_interval          VALUE=1.0

    # start optional heater
    {% if (HEATER and TARGET != 0.0) %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
        SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TARGET}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'soaking'"
    {% endif %}

    # pause the print, if active
    {% if printer['virtual_sdcard'].is_active %}
        PAUSE
    {% endif %}
    
    UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={check_interval}

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    # check that the HEAT_SOAK macro is active before canceling
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    {% set stage = heat_soak.stage %}
    {% if stage in ("heating", "soaking") %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
        UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION=1
    {% endif %}

[delayed_gcode _heat_soaker]
# description: internal macro to handle heat soaking activity
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    # debug
    #{ action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}

    # update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set soaker_sensor = printer[heat_soak.soaker_sensor] %}
    {% set soak_temp = soaker_sensor.temperature %}
    {% if heat_soak.heater_sensor %}
        {% set heater_sensor = printer[heat_soak.heater_sensor] %}
        {% set heater_temp = heater_sensor.temperature | round(1) %}
    {% endif %}
    {% set stage = heat_soak.stage %}

    # compute the new temp difference and save history
    {% set temp_history = heat_soak.temp_history %}
    {% set rate_history = heat_soak.rate_history %}
    {% set temp_diff = soak_temp - (temp_history | last) %}
    {% set _ = temp_history.append(soak_temp) %}
    {% set soak_temp_smoothed = None %}
    {% set soak_temp_rate_smoothed = None %}
    {% if (temp_history | length) > heat_soak.temp_smooth_time %}
        {% set temp_history = temp_history[1:] %}
        # compute average temp
        {% set soak_temp_smoothed = ((temp_history | sum) / (temp_history | length)) %}
        {% set _ = rate_history.append(soak_temp_smoothed) %}
        {% if (rate_history | length) > heat_soak.rate_smooth_time %}
            {% set rate_history = rate_history[1:] %}
            # compute average rate of change
            {% set rate_delta = (rate_history | last) - (rate_history | first) %}
            {% set time_period = (heat_soak.check_interval | float * (rate_history | length | float)) %}
            {% set soak_temp_rate_smoothed = ((rate_delta / time_period) * 60.0) | round(3) %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_history VALUE="{(temp_history | pprint | replace("\n", ""))}"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=rate_history VALUE="{(rate_history | pprint | replace("\n", ""))}"

    # debug
    # {action_respond_info("DEBUG Smoothing -- rate: %fC/m, temp %fC" % (soak_temp_rate_smoothed, soak_temp_smoothed))}

    # whie heating
    {% if stage == "heating" %}
        {% if heater_temp < heat_soak.target_temp %}
            {% if total_time_elapsed % heat_soak.heating_report_interval == 0 %}
                M117 { "heating -- %.1fC / %.1fC -- %.1fm elapsed" % (heater_temp, heat_soak.target_temp, total_time_elapsed / 60.0) }
                {action_respond_info("Heating %.1fC / %.1fC" % (heater_temp, heat_soak.target_temp))}
            {% endif %}
        {% else %}
            {action_respond_info("Heating completed after ~%.1fm, starting heat soak phase." % (total_time_elapsed / 60.0))}
            {% set stage = "soaking" %}
            # reset total time to 0 so soaking time is reported from 0
            {% set total_time_elapsed = 0 %}
            SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
        {% endif %}
    {% endif %}

    # while soaking
    {% if stage == "soaking" %}
        ## decrement the soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        ## abort soaking if timeout is reached
        {% if soak_time_remaining <= 0 %}
            {action_respond_info("Heat soak timed out after ~%.1fm" % (total_time_elapsed / 60.0))}
            {% set stage = "cancel" %}
        # if the smoothing algorithm hasn't settled on these values yet, dont evaluate them
        {% elif soak_temp_rate_smoothed is none or soak_temp_smoothed is none %}
            {% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}
                ## not enough data points yet to determing the soak rate, show dashes
                M117 { "Soaking -- gathering data -- %.1fm remaining" % (soak_time_remaining / 60.0) }
                {action_respond_info("Soaking -- gathering data -- %.2fC/m" % (soak_time_remaining / 60.0))}
            {% endif %}
        # if the heat soak must continue for some reason
        {% elif (soak_temp_rate_smoothed > heat_soak.target_rate) or (heat_soak.min_soak_temp > 0 and soak_temp_smoothed < heat_soak.min_soak_temp) %}
            {% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}
                {% set format_vars = [
                    soak_temp_smoothed | float,
                    (heat_soak.min_soak_temp | float | round(0) | string) if (heat_soak.min_soak_temp > 0) else "-",
                    soak_temp_rate_smoothed,
                    heat_soak.target_rate,
                    soak_time_remaining / 60.0
                ] %}
                {% set message = "Soaking -- temp: {0:.1f}C / {1}C -- rate: {2:.3f}C/m / {3:.3f}C/m -- {4:.1f}m remaining".format(*format_vars) %}
                M117 { message }
                {action_respond_info(message)}
            {% endif %}
        ## end soaking if the target soak_temp_rate is achieved
        {% else %}
            {action_respond_info("Heat soak complete after ~%.1fm at %.3fC/m / %.1fC" % (total_time_elapsed / 60.0, soak_temp_rate_smoothed | round(3), soak_temp))}
            {% set stage = "done" %}
        {% endif %}

    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{stage}'"

    {% if stage in ("done", "cancel") %}
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            {% if heat_soak.cancel %}
                {heat_soak.cancel}
            {% endif %}
        {% else %}
            {% if printer['pause_resume'].is_paused  %}
                RESUME
            {% endif %}
            {% if heat_soak.continue %}
                {heat_soak.continue}
            {% endif %}
        {% endif %}
    {% else %}
        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ heat_soak.check_interval }
        ## dwell for 1ms to prevent from going idle
        G4 P1
    {% endif %}